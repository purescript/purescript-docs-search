module Docs.Search.IndexBuilder where

import Prelude

import Docs.Search.Config (config)
import Docs.Search.Declarations (Declarations(..), mkDeclarations)
import Docs.Search.DocsJson (DocsJson)
import Docs.Search.Extra ((>#>))
import Docs.Search.Index (getPartId)
import Docs.Search.SearchResult (SearchResult)
import Docs.Search.TypeIndex (TypeIndex, mkTypeIndex)

import Data.Argonaut.Core (stringify)
import Data.Argonaut.Decode (decodeJson)
import Data.Argonaut.Encode (encodeJson)
import Data.Argonaut.Parser (jsonParser)
import Data.Array as Array
import Data.Either (Either(..))
import Data.List (List)
import Data.List as List
import Data.Map (Map)
import Data.Map as Map
import Data.Maybe (Maybe(..))
import Data.Newtype (unwrap)
import Data.Search.Trie as Trie
import Data.Set as Set
import Data.String.CodePoints (contains) as String
import Data.String.CodeUnits (singleton) as String
import Data.String.Common (replace) as String
import Data.String.Pattern (Pattern(..), Replacement(..))
import Data.Traversable (for, for_)
import Data.Tuple (Tuple(..), fst, snd)
import Effect (Effect)
import Effect.Aff (Aff, launchAff_, parallel, sequential)
import Effect.Class (liftEffect)
import Effect.Console (log)
import Node.Encoding (Encoding(UTF8))
import Node.FS.Aff (exists, mkdir, readTextFile, readdir, stat, writeTextFile)
import Node.FS.Stats (isDirectory, isFile)
import Node.Process as Process

main :: Effect Unit
main = launchAff_ mainAff

mainAff :: Aff Unit
mainAff = do
  checkDirectories

  docsJsons <- collectDocsJsons config.outputDirectory

  liftEffect $ log $
    "Found " <> show (Array.length docsJsons) <> " modules."

  let index = mkDeclarations docsJsons
      typeIndex = mkTypeIndex index

  createDirectories

  void $ sequential do
    ignore <$> parallel (writeIndex index)
           <*> parallel (writeTypeIndex typeIndex)
           <*> parallel patchDocs

  liftEffect $ log $
    "Loaded " <>
    show (Trie.size $ unwrap index) <>
    " definitions and " <>
    show (List.length $ join $ map snd $ Trie.entriesUnordered (unwrap index)) <>
    " type definitions"
  where ignore _ _ _ = unit

-- | Exit early if something is missing.
checkDirectories :: Aff Unit
checkDirectories = do
  for_ config.requiredDirectories \dir -> do
    whenM (not <$> directoryExists dir) $
      liftEffect $ logAndExit "Generate the documentation first!"

-- | Read and decode all `docs.json` files in the `outputDir`.
collectDocsJsons :: String -> Aff (Array DocsJson)
collectDocsJsons outputDir = do
  paths <- readdir outputDir

  Array.catMaybes <$> for paths \moduleName -> do
    let jsonFile = "output/" <> moduleName <> "/docs.json"
    doesExist <- fileExists jsonFile
    if doesExist then do

      contents <- readTextFile UTF8 jsonFile
      let eiResult = jsonParser contents >>= decodeJson

      case eiResult of
        Left error -> do
          liftEffect $ log $
            "\"docs.json\" decoding failed failed for module " <> moduleName <> ": " <> show error
          pure Nothing
        Right result -> pure result

    else do
      liftEffect $ do
        log $
          "Couldn't find docs.json for " <> moduleName
      pure Nothing

writeTypeIndex :: TypeIndex -> Aff Unit
writeTypeIndex typeIndex =
  for_ entries \(Tuple typeShape results) -> do
    writeTextFile UTF8 ("generated-docs/index/types/" <> typeShape <> ".js")
      (mkHeader typeShape <> stringify (encodeJson results))
  where
    mkHeader typeShape =
      "// This file was generated by purescript-docs-search\n" <>
      "window.DocsSearchTypeIndex[\"" <> typeShape <> "\"] = "
    entries :: Array _
    entries = Map.toUnfoldableUnordered (unwrap typeIndex)

-- | Get a mapping from index parts to index contents.
getIndex :: Declarations -> Map Int (Array (Tuple String (Array SearchResult)))
getIndex (Declarations trie) =
  Array.foldr insert mempty parts
    where
      prefixes :: Array (List Char)
      prefixes =
        Set.toUnfoldable $
        List.foldr (\entry -> Set.insert (List.take 2 $ fst entry)) mempty $
        Trie.entriesUnordered trie

      parts
        :: Array { prefix :: List Char
                 , results :: Array (Tuple String (Array SearchResult))
                 }
      parts = prefixes <#> \prefix ->
        let results =
              Array.fromFoldable $
              Trie.query prefix trie <#>
              \(Tuple path value) ->
              Tuple (path >#> String.singleton) (Array.fromFoldable value)
        in
         { prefix, results }

      insert part = Map.insertWith append (getPartId part.prefix) part.results

writeIndex :: Declarations -> Aff Unit
writeIndex = getIndex >>> \resultsMap -> do
  for_ (Map.toUnfoldableUnordered resultsMap :: Array _)
    \(Tuple indexPartId results) -> do
      let header =
            "// This file was generated by purescript-docs-search.\n" <>
            "window.DocsSearchIndex[\"" <> show indexPartId <> "\"] = "

      writeTextFile UTF8 (config.mkIndexPartPath indexPartId) $
        header <> stringify (encodeJson results)

patchHTML :: String -> Tuple Boolean String
patchHTML html =
  let
    pattern = Pattern "</body>"
    patch = "<!-- Docs search index. -->" <>
            "<script type=\"text/javascript\" src=\"../docs-search-app.js\"></script>" <>
            "<script type=\"text/javascript\">" <>
            "window.DocsSearchTypeIndex = {};" <>
            "window.DocsSearchIndex = {};" <>
            "</script>" <>
            "</body>"
  in if not $ String.contains (Pattern patch) html
     then Tuple true $ String.replace pattern (Replacement patch) html
     else Tuple false html

patchDocs :: Aff Unit
patchDocs = do
  let dirname = "generated-docs/"

  files <- readdir (dirname <> "html")

  for_ files \file -> do
    let path = dirname <> "html/" <> file

    whenM (fileExists path) do
      contents <- readTextFile UTF8 path
      case patchHTML contents of
        Tuple true patchedContents -> do
          writeTextFile UTF8 path patchedContents
        _ -> pure unit

createDirectories :: Aff Unit
createDirectories = do
  let generatedDocsDir = "generated-docs/"
      indexDir         = "generated-docs/index"
      declIndexDir     = "generated-docs/index/declarations"
      typeIndexDir     = "generated-docs/index/types"

  whenM (not <$> directoryExists generatedDocsDir) $ liftEffect do
    logAndExit "Generate the documentation first!"

  whenM (not <$> directoryExists indexDir) do
    mkdir indexDir

  whenM (not <$> directoryExists declIndexDir) do
    mkdir declIndexDir

  whenM (not <$> directoryExists typeIndexDir) do
    mkdir typeIndexDir

directoryExists :: String -> Aff Boolean
directoryExists path = do
  doesExist <- exists path
  case doesExist of
    false -> pure false
    true -> isDirectory <$> stat path

fileExists :: String -> Aff Boolean
fileExists path = do
  doesExist <- exists path
  case doesExist of
    false -> pure false
    true -> isFile <$> stat path

logAndExit :: forall a. String -> Effect a
logAndExit err = do
  log err
  Process.exit 1
